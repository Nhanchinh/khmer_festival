import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { authAPI } from '../../utils/api';

// ‚úÖ S·ª¨A L·∫†I: Multi Image Upload Component - ·∫¢nh nh·ªè h∆°n
const MultiImageUpload = ({ images, onImagesChange, disabled }) => {
    const [isUploading, setIsUploading] = useState(false);
    const [uploadProgress, setUploadProgress] = useState({});

    const uploadImage = async (file) => {
        const formData = new FormData();
        formData.append('file', file);

        const response = await fetch('http://localhost:5000/api/images/upload', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error('Upload failed');
        }

        const result = await response.json();
        return `http://localhost:5000/api/images/${result.fileName}`;
    };

    const handleFileSelect = async (e) => {
        const files = Array.from(e.target.files);
        if (files.length === 0) return;

        setIsUploading(true);
        const newImageUrls = [];

        try {
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                setUploadProgress(prev => ({ ...prev, [file.name]: 0 }));

                const imageUrl = await uploadImage(file);
                newImageUrls.push(imageUrl);

                setUploadProgress(prev => ({ ...prev, [file.name]: 100 }));
            }

            onImagesChange([...images, ...newImageUrls]);
        } catch (error) {
            console.error('Upload error:', error);
            alert('C√≥ l·ªói khi upload ·∫£nh: ' + error.message);
        } finally {
            setIsUploading(false);
            setUploadProgress({});
            e.target.value = ''; // Reset input
        }
    };

    const removeImage = (indexToRemove) => {
        onImagesChange(images.filter((_, index) => index !== indexToRemove));
    };

    return (
        <div className="compact-image-upload">
            <label className="upload-label">
                H√¨nh ·∫£nh b√†i vi·∫øt
                {images.length > 0 && (
                    <span className="image-count">({images.length} ·∫£nh)</span>
                )}
            </label>

            {/* Upload Button */}
            <div className="upload-section">
                <input
                    type="file"
                    multiple
                    accept="image/*"
                    onChange={handleFileSelect}
                    disabled={disabled || isUploading}
                    id="compact-image-upload"
                    style={{ display: 'none' }}
                />
                <label
                    htmlFor="compact-image-upload"
                    className={`compact-upload-btn ${disabled || isUploading ? 'disabled' : ''}`}
                >
                    {isUploading ? (
                        <>
                            <span className="loading-spinner"></span>
                            ƒêang upload...
                        </>
                    ) : (
                        <>
                            üì∑ Ch·ªçn ·∫£nh
                        </>
                    )}
                </label>
            </div>

            {/* Upload Progress */}
            {Object.keys(uploadProgress).length > 0 && (
                <div className="compact-upload-progress">
                    {Object.entries(uploadProgress).map(([fileName, progress]) => (
                        <div key={fileName} className="compact-progress-item">
                            <span className="progress-filename">{fileName}</span>
                            <div className="compact-progress-bar">
                                <div
                                    className="compact-progress-fill"
                                    style={{ width: `${progress}%` }}
                                ></div>
                            </div>
                        </div>
                    ))}
                </div>
            )}

            {/* ‚úÖ COMPACT Image Preview Grid */}
            {images.length > 0 && (
                <div className="compact-image-grid">
                    {images.map((imageUrl, index) => (
                        <div key={index} className="compact-image-item">
                            <img src={imageUrl} alt={`Preview ${index + 1}`} />

                            {/* ‚úÖ X Button ƒë·ªÉ x√≥a */}
                            <button
                                type="button"
                                className="compact-remove-btn"
                                onClick={() => removeImage(index)}
                                disabled={disabled}
                                title="X√≥a ·∫£nh n√†y"
                            >
                                ‚úï
                            </button>

                            {/* Badge ·∫£nh ch√≠nh */}
                            {index === 0 && (
                                <div className="compact-main-badge">Ch√≠nh</div>
                            )}
                        </div>
                    ))}
                </div>
            )}

            {/* Hint */}
            <p className="compact-upload-hint">
                üí° ·∫¢nh ƒë·∫ßu ti√™n s·∫Ω ƒë∆∞·ª£c d√πng l√†m ·∫£nh ƒë·∫°i di·ªán
            </p>
        </div>
    );
};

const AdminArticles = ({ articles, onAdd, onUpdate, onDelete }) => {
    const [showModal, setShowModal] = useState(false);
    const [editingArticle, setEditingArticle] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    const [formData, setFormData] = useState({
        title: '',
        description: '',
        content: '',
        images: [],
        videoUrl: '',
        location: '',
        tags: '',
        featured: false
    });

    const [sortBy, setSortBy] = useState('date');
    const [filterBy, setFilterBy] = useState('');
    const [searchTerm, setSearchTerm] = useState('');

    // Predefined tags for Khmer festivals
    const predefinedTags = [
        'l·ªÖ h·ªôi truy·ªÅn th·ªëng',
        'ng∆∞·ªùi khmer',
        't·∫øt khmer',
        'chol chnam thmay',
        'ok om bok',
        'pchum ben',
        'dolta',
        'vƒÉn h√≥a',
        't√¥n gi√°o',
        'm√πa v·ª•',
        'ngh·ªá thu·∫≠t',
        '√¢m nh·∫°c',
        'm√∫a lam thon',
        'ƒëua ghe ngo',
        'c√∫ng ph·∫≠t',
        'ch√πa khmer'
    ];

    const categories = [
        'L·ªÖ h·ªôi truy·ªÅn th·ªëng',
        'L·ªÖ h·ªôi t√¥n gi√°o',
        'L·ªÖ h·ªôi m√πa v·ª•',
        'L·ªÖ h·ªôi vƒÉn h√≥a',
        'L·ªÖ h·ªôi ngh·ªá thu·∫≠t'
    ];

    // Reset form when editing changes
    useEffect(() => {
        if (editingArticle) {
            setFormData({
                title: editingArticle.title || '',
                description: editingArticle.excerpt || '',
                content: editingArticle.content || '',
                images: Array.isArray(editingArticle.image) ? editingArticle.image : [editingArticle.image] || [],
                videoUrl: editingArticle.videoUrl || '',
                location: editingArticle.location || '',
                tags: Array.isArray(editingArticle.tags) ? editingArticle.tags.join(', ') : '',
                featured: editingArticle.featured || false
            });
        } else {
            setFormData({
                title: '',
                description: '',
                content: '',
                images: [],
                videoUrl: '',
                location: '',
                tags: '',
                featured: false
            });
        }
    }, [editingArticle]);

    // Filter and sort articles
    const filteredAndSortedArticles = articles
        .filter(article => {
            const matchesSearch = article.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                article.excerpt.toLowerCase().includes(searchTerm.toLowerCase());
            return matchesSearch;
        })
        .sort((a, b) => {
            switch (sortBy) {
                case 'date':
                    return new Date(b.date) - new Date(a.date);
                case 'title':
                    return a.title.localeCompare(b.title);
                case 'views':
                    return b.views - a.views;
                default:
                    return 0;
            }
        });

    const handleInputChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
    };

    // ‚úÖ TH√äM: Handler cho images
    const handleImagesChange = (newImages) => {
        setFormData(prev => ({
            ...prev,
            images: newImages
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (isLoading) return;

        // ‚úÖ TH√äM: Double check authentication
        const currentUser = authAPI.getCurrentUser();
        if (!currentUser) {
            alert('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!');
            return;
        }

        setIsLoading(true);
        setError('');

        try {
            // ‚úÖ S·ª¨A: ƒê√∫ng format data g·ª≠i l√™n API
            const articleData = {
                title: formData.title.trim(),
                description: formData.description.trim(),
                body: formData.content.trim(),
                image: formData.images, // üëà Array of image URLs
                videoUrl: formData.videoUrl.trim() || undefined,
                mapLocation: formData.location.trim() || undefined,
                tagList: formData.tags.trim() ?
                    formData.tags.split(',').map(tag => tag.trim()).filter(tag => tag) :
                    []
            };

            console.log('üîç Final article data being sent:', articleData);

            if (editingArticle) {
                await onUpdate(editingArticle.slug || editingArticle.id, articleData);
            } else {
                await onAdd(articleData);
            }

            handleCloseModal();
            alert('‚úÖ B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
        } catch (error) {
            console.error('Error saving article:', error);
            setError(error.message || 'C√≥ l·ªói x·∫£y ra khi l∆∞u b√†i vi·∫øt');
        } finally {
            setIsLoading(false);
        }
    };

    const handleEdit = (article) => {
        // ‚úÖ TH√äM: Ki·ªÉm tra authentication
        const currentUser = authAPI.getCurrentUser();
        if (!currentUser) {
            alert('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ch·ªânh s·ª≠a b√†i vi·∫øt!');
            return;
        }

        setEditingArticle(article);
        setFormData({
            title: article.title || '',
            description: article.excerpt || '',
            content: article.content || '',
            images: article.image ? (Array.isArray(article.image) ? article.image : [article.image]) : [],
            videoUrl: article.videoUrl || '',
            location: article.location || '',
            tags: article.tags ? article.tags.join(', ') : '',
            featured: article.featured || false
        });
        setShowModal(true);
    };

    const handleAdd = () => {
        // ‚úÖ TH√äM: Ki·ªÉm tra authentication
        const currentUser = authAPI.getCurrentUser();
        if (!currentUser) {
            alert('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o b√†i vi·∫øt!');
            return;
        }

        setEditingArticle(null);
        setFormData({
            title: '',
            description: '',
            content: '',
            images: [],
            videoUrl: '',
            location: '',
            tags: '',
            featured: false
        });
        setShowModal(true);
    };

    const handleDelete = async (article) => {
        if (window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt "${article.title}"?`)) {
            try {
                setIsLoading(true);
                await onDelete(article.id);
            } catch (error) {
                console.error('Delete error:', error);
                setError('C√≥ l·ªói x·∫£y ra khi x√≥a b√†i vi·∫øt: ' + error.message);
            } finally {
                setIsLoading(false);
            }
        }
    };

    const handleCloseModal = () => {
        setFormData({
            title: '',
            description: '',
            content: '',
            images: [],
            videoUrl: '',
            location: '',
            tags: '',
            featured: false
        });
        setEditingArticle(null);
        setShowModal(false);
        setError('');
    };

    return (
        <div className="admin-articles-clean">
            {/* Header */}
            <div className="admin-header-clean">
                <h1>Qu·∫£n l√Ω b√†i vi·∫øt</h1>
                <button
                    className="btn-primary"
                    onClick={handleAdd}
                    disabled={isLoading}
                >
                    Th√™m b√†i vi·∫øt m·ªõi
                </button>
            </div>

            {/* Error Message */}
            {error && (
                <div className="error-message">
                    <span>‚ö†Ô∏è {error}</span>
                    <button onClick={() => setError('')}>‚úï</button>
                </div>
            )}

            {/* Filters */}
            <div className="filters-clean">
                <div className="search-box">
                    <input
                        type="text"
                        className="search-clean"
                        placeholder="T√¨m ki·∫øm b√†i vi·∫øt..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />
                </div>

                <select
                    className="sort-clean"
                    value={sortBy}
                    onChange={(e) => setSortBy(e.target.value)}
                >
                    <option value="date">M·ªõi nh·∫•t</option>
                    <option value="title">T√™n A-Z</option>
                    <option value="views">L∆∞·ª£t xem</option>
                </select>
            </div>

            {/* Articles Table */}
            {filteredAndSortedArticles.length === 0 ? (
                <div className="empty-state-clean">
                    <h3>Ch∆∞a c√≥ b√†i vi·∫øt n√†o</h3>
                    <p>Th√™m b√†i vi·∫øt ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu!</p>
                    <button
                        className="btn-primary"
                        onClick={handleAdd}
                    >
                        Th√™m b√†i vi·∫øt ƒë·∫ßu ti√™n
                    </button>
                </div>
            ) : (
                <div className="table-container-clean">
                    <table className="table-clean">
                        <thead>
                            <tr>
                                <th>B√†i vi·∫øt</th>
                                <th>ƒê·ªãa ƒëi·ªÉm</th>
                                <th>Ng√†y t·∫°o</th>
                                <th>Thao t√°c</th>
                            </tr>
                        </thead>
                        <tbody>
                            {filteredAndSortedArticles.map(article => (
                                <tr key={article.id}>
                                    <td>
                                        <div className="article-title-cell">
                                            <div className="thumbnail-cell">
                                                <img
                                                    src={
                                                        (() => {
                                                            if (Array.isArray(article.image) && article.image.length > 0) {
                                                                return article.image[0];
                                                            }
                                                            if (typeof article.image === 'string' && article.image) {
                                                                return article.image;
                                                            }
                                                            return '/placeholder.jpg';
                                                        })()
                                                    }
                                                    alt={article.title}
                                                    className="article-thumbnail"
                                                />
                                            </div>
                                            <div>
                                                <strong>{article.title}</strong>
                                                <p>{article.excerpt}</p>
                                                {article.featured && <span className="featured-badge">N·ªïi b·∫≠t</span>}
                                            </div>
                                        </div>
                                    </td>
                                    <td>{article.location}</td>
                                    <td>{new Date(article.date).toLocaleDateString('vi-VN')}</td>
                                    <td>
                                        <div className="actions-clean">
                                            <button
                                                onClick={() => handleEdit(article)}
                                                className="btn-edit"
                                                disabled={isLoading}
                                                title="Ch·ªânh s·ª≠a"
                                            >
                                                ‚úèÔ∏è
                                            </button>
                                            <button
                                                onClick={() => handleDelete(article)}
                                                className="btn-delete"
                                                disabled={isLoading}
                                                title="X√≥a"
                                            >
                                                üóëÔ∏è
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            )}

            {/* Modal */}
            {showModal && (
                <div className="modal-overlay">
                    <div className="modal-content">
                        <div className="modal-header">
                            <h3>{editingArticle ? 'Ch·ªânh s·ª≠a b√†i vi·∫øt' : 'Th√™m b√†i vi·∫øt m·ªõi'}</h3>
                            <button
                                className="modal-close"
                                onClick={handleCloseModal}
                                disabled={isLoading}
                            >
                                ‚úï
                            </button>
                        </div>

                        <form onSubmit={handleSubmit} className="modal-form">
                            <div className="form-grid-modal">
                                {/* Title */}
                                <div className="form-group">
                                    <label>
                                        Ti√™u ƒë·ªÅ <span className="required">*</span>
                                    </label>
                                    <input
                                        type="text"
                                        name="title"
                                        value={formData.title}
                                        onChange={handleInputChange}
                                        placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt..."
                                        required
                                        disabled={isLoading}
                                    />
                                </div>

                                {/* Description */}
                                <div className="form-group">
                                    <label>
                                        M√¥ t·∫£ ng·∫Øn <span className="required">*</span>
                                    </label>
                                    <textarea
                                        name="description"
                                        value={formData.description}
                                        onChange={handleInputChange}
                                        placeholder="Nh·∫≠p m√¥ t·∫£ ng·∫Øn v·ªÅ l·ªÖ h·ªôi..."
                                        rows="3"
                                        required
                                        disabled={isLoading}
                                    />
                                </div>

                                {/* Content */}
                                <div className="form-group">
                                    <label>
                                        N·ªôi dung chi ti·∫øt <span className="required">*</span>
                                    </label>
                                    <textarea
                                        name="content"
                                        value={formData.content}
                                        onChange={handleInputChange}
                                        placeholder="Nh·∫≠p n·ªôi dung chi ti·∫øt v·ªÅ l·ªÖ h·ªôi..."
                                        rows="8"
                                        required
                                        disabled={isLoading}
                                    />
                                </div>

                                {/* Images */}
                                <div className="form-group">
                                    <MultiImageUpload
                                        images={formData.images}
                                        onImagesChange={handleImagesChange}
                                        disabled={isLoading}
                                    />
                                </div>

                                {/* Location and Tags Row */}
                                <div className="form-row">
                                    <div className="form-group">
                                        <label>ƒê·ªãa ƒëi·ªÉm t·ªï ch·ª©c</label>
                                        <input
                                            type="text"
                                            name="location"
                                            value={formData.location}
                                            onChange={handleInputChange}
                                            placeholder="T·ªânh/th√†nh ph·ªë..."
                                            disabled={isLoading}
                                        />
                                    </div>

                                    <div className="form-group">
                                        <label>Th·∫ª tags</label>
                                        <input
                                            type="text"
                                            name="tags"
                                            value={formData.tags}
                                            onChange={handleInputChange}
                                            placeholder="tag1, tag2, tag3..."
                                            disabled={isLoading}
                                        />
                                    </div>
                                </div>

                                {/* Featured Checkbox */}
                                <div className="checkbox-field">
                                    <input
                                        type="checkbox"
                                        name="featured"
                                        checked={formData.featured}
                                        onChange={handleInputChange}
                                        disabled={isLoading}
                                        id="featured-checkbox"
                                    />
                                    <label htmlFor="featured-checkbox">
                                        ‚≠ê ƒê√°nh d·∫•u l√† l·ªÖ h·ªôi n·ªïi b·∫≠t
                                    </label>
                                </div>
                            </div>

                            <div className="modal-actions">
                                <button
                                    type="button"
                                    onClick={handleCloseModal}
                                    disabled={isLoading}
                                    className="btn-secondary"
                                >
                                    H·ªßy b·ªè
                                </button>
                                <button
                                    type="submit"
                                    disabled={isLoading}
                                    className="btn-primary"
                                >
                                    {isLoading ? (
                                        <>
                                            <span className="loading-spinner"></span>
                                            ƒêang l∆∞u...
                                        </>
                                    ) : (
                                        editingArticle ? 'üíæ C·∫≠p nh·∫≠t' : '‚ú® Th√™m m·ªõi'
                                    )}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
};

export default AdminArticles; 