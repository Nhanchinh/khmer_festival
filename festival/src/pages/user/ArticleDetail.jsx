import React, { useEffect, useState, useRef } from 'react';
import { useParams, Link } from 'react-router-dom';

const ArticleDetail = ({ articles, incrementViews }) => {
    const { id } = useParams();
    const [article, setArticle] = useState(null);
    const [relatedArticles, setRelatedArticles] = useState([]);
    const [comments, setComments] = useState([]);
    const [newComment, setNewComment] = useState({
        name: '',
        email: '',
        content: '',
        rating: 5
    });
    const viewCountedRef = useRef(new Set());

    // Load comments from localStorage
    useEffect(() => {
        const savedComments = localStorage.getItem(`comments_${id}`);
        if (savedComments) {
            setComments(JSON.parse(savedComments));
        } else {
            const mockComments = [
                {
                    id: 1,
                    name: "Nguy·ªÖn VƒÉn A",
                    content: "B√†i vi·∫øt r·∫•t hay v√† b·ªï √≠ch! C·∫£m ∆°n admin ƒë√£ chia s·∫ª v·ªÅ vƒÉn h√≥a Khmer.",
                    rating: 5,
                    date: "2024-01-15",
                    avatar: "üßë‚Äçüíº"
                },
                {
                    id: 2,
                    name: "Tr·∫ßn Th·ªã B",
                    content: "M√¨nh ƒë√£ tham gia l·ªÖ h·ªôi n√†y r·ªìi, th·ª±c s·ª± r·∫•t √Ω nghƒ©a v√† vui v·∫ª. Recommend m·ªçi ng∆∞·ªùi n√™n ƒëi.",
                    rating: 5,
                    date: "2024-01-10",
                    avatar: "üë©‚Äçüéì"
                },
                {
                    id: 3,
                    name: "L√™ Minh C",
                    content: "Th√¥ng tin r·∫•t chi ti·∫øt v√† ƒë·∫ßy ƒë·ªß. Gi√∫p m√¨nh hi·ªÉu th√™m v·ªÅ vƒÉn h√≥a d√¢n t·ªôc Khmer.",
                    rating: 4,
                    date: "2024-01-08",
                    avatar: "üë®‚Äçüíª"
                }
            ];
            setComments(mockComments);
            localStorage.setItem(`comments_${id}`, JSON.stringify(mockComments));
        }
    }, [id]);

    useEffect(() => {
        const foundArticle = articles.find(a => a.id === parseInt(id));
        if (foundArticle) {
            setArticle(foundArticle);

            const articleId = foundArticle.id;
            if (!viewCountedRef.current.has(articleId)) {
                incrementViews(articleId);
                viewCountedRef.current.add(articleId);
            }

            const related = articles
                .filter(a => a.category === foundArticle.category && a.id !== foundArticle.id)
                .slice(0, 3);
            setRelatedArticles(related);
        }
    }, [id, articles]);

    const handleCommentSubmit = (e) => {
        e.preventDefault();

        if (!newComment.name.trim() || !newComment.content.trim()) {
            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t√™n v√† n·ªôi dung b√¨nh lu·∫≠n!');
            return;
        }

        const avatars = ["üßë‚Äçüíº", "üë©‚Äçüéì", "üë®‚Äçüíª", "üë©‚Äçüíº", "üßë‚Äçüéì", "üë®‚Äçüé®", "üë©‚Äçüî¨", "üßë‚Äçüç≥"];
        const randomAvatar = avatars[Math.floor(Math.random() * avatars.length)];

        const comment = {
            id: Date.now(),
            name: newComment.name.trim(),
            email: newComment.email.trim(),
            content: newComment.content.trim(),
            rating: newComment.rating,
            date: new Date().toISOString().split('T')[0],
            avatar: randomAvatar
        };

        const updatedComments = [comment, ...comments];
        setComments(updatedComments);
        localStorage.setItem(`comments_${id}`, JSON.stringify(updatedComments));

        setNewComment({
            name: '',
            email: '',
            content: '',
            rating: 5
        });

        alert('üéâ C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! B√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng.');
    };

    const averageRating = comments.length > 0
        ? (comments.reduce((sum, comment) => sum + comment.rating, 0) / comments.length).toFixed(1)
        : 0;

    if (!article) {
        return (
            <div className="article-detail-balanced">
                <div className="error-state">
                    <div className="error-icon">üîç</div>
                    <h2>Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt</h2>
                    <p>B√†i vi·∫øt b·∫°n ƒëang t√¨m ki·∫øm c√≥ th·ªÉ ƒë√£ b·ªã x√≥a ho·∫∑c kh√¥ng t·ªìn t·∫°i.</p>
                    <Link to="/" className="btn-balanced primary">‚Üê V·ªÅ trang ch·ªß</Link>
                </div>
            </div>
        );
    }

    return (
        <div className="article-detail-balanced">
            {/* Breadcrumb v·ªõi accent */}
            <nav className="breadcrumb-balanced">
                <Link to="/">üè† Trang ch·ªß</Link>
                <span className="separator">‚Üí</span>
                <span className="current">{article.title}</span>
            </nav>

            {/* Article */}
            <article className="article-main-balanced">
                {/* Header v·ªõi gradient */}
                <header className="article-header-balanced">
                    <div className="category-badge">{article.category}</div>
                    <h1 className="article-title-balanced">{article.title}</h1>

                    <div className="article-meta-balanced">
                        <div className="meta-item">
                            <span className="icon">üìç</span>
                            <span>{article.location}</span>
                        </div>
                        <div className="meta-item">
                            <span className="icon">üìÖ</span>
                            <span>{new Date(article.date).toLocaleDateString('vi-VN')}</span>
                        </div>
                        <div className="meta-item">
                            <span className="icon">üëÅÔ∏è</span>
                            <span>{article.views.toLocaleString('vi-VN')} l∆∞·ª£t xem</span>
                        </div>
                        <div className="meta-item special">
                            <span className="icon">‚≠ê</span>
                            <span>{averageRating}/5 ({comments.length} ƒë√°nh gi√°)</span>
                        </div>
                    </div>

                    <div className="tags-balanced">
                        {article.tags.map(tag => (
                            <span key={tag} className="tag-balanced">#{tag}</span>
                        ))}
                    </div>
                </header>

                {/* Image v·ªõi overlay */}
                <div className="article-image-balanced">
                    <img src={article.image} alt={article.title} />
                    <div className="image-overlay"></div>
                </div>

                {/* Content */}
                <div className="article-content-balanced">
                    {article.content.split('\n').map((paragraph, index) => (
                        paragraph.trim() && (
                            <p key={index}>{paragraph}</p>
                        )
                    ))}
                </div>

                {/* Share v·ªõi gradient background */}
                <div className="share-balanced">
                    <div className="share-content">
                        <h3>üì¢ Chia s·∫ª b√†i vi·∫øt</h3>
                        <p>H√£y lan t·ªèa vƒÉn h√≥a Khmer ƒë·∫øn nhi·ªÅu ng∆∞·ªùi h∆°n!</p>
                        <div className="share-buttons-balanced">
                            <button
                                className="btn-balanced secondary"
                                onClick={() => {
                                    navigator.clipboard.writeText(window.location.href);
                                    alert('‚úÖ ƒê√£ sao ch√©p link!');
                                }}
                            >
                                üìã Sao ch√©p link
                            </button>
                            <button
                                className="btn-balanced secondary"
                                onClick={() => window.print()}
                            >
                                üñ®Ô∏è In b√†i vi·∫øt
                            </button>
                            <button
                                className="btn-balanced secondary"
                                onClick={() => {
                                    if (navigator.share) {
                                        navigator.share({
                                            title: article.title,
                                            text: article.excerpt,
                                            url: window.location.href
                                        });
                                    }
                                }}
                            >
                                üì§ Chia s·∫ª
                            </button>
                        </div>
                    </div>
                </div>
            </article>

            {/* Comments v·ªõi accent colors */}
            <section className="comments-balanced">
                <div className="comments-header-balanced">
                    <h2>üí¨ B√¨nh lu·∫≠n & ƒê√°nh gi√°</h2>
                    <div className="rating-summary-balanced">
                        <div className="rating-score-balanced">{averageRating}</div>
                        <div className="stars-balanced">
                            {[1, 2, 3, 4, 5].map(star => (
                                <span key={star} className={star <= Math.round(averageRating) ? 'star active' : 'star'}>
                                    ‚òÖ
                                </span>
                            ))}
                        </div>
                        <span className="rating-text">{comments.length} ƒë√°nh gi√° t·ª´ ƒë·ªôc gi·∫£</span>
                    </div>
                </div>

                {/* Comment Form v·ªõi m√†u s·∫Øc */}
                <div className="comment-form-balanced">
                    <h3>‚úçÔ∏è Chia s·∫ª c·∫£m nh·∫≠n c·ªßa b·∫°n</h3>
                    <form onSubmit={handleCommentSubmit}>
                        <div className="form-grid-balanced">
                            <input
                                type="text"
                                placeholder="T√™n c·ªßa b·∫°n *"
                                value={newComment.name}
                                onChange={(e) => setNewComment({ ...newComment, name: e.target.value })}
                                required
                            />
                            <input
                                type="email"
                                placeholder="Email (kh√¥ng b·∫Øt bu·ªôc)"
                                value={newComment.email}
                                onChange={(e) => setNewComment({ ...newComment, email: e.target.value })}
                            />
                        </div>

                        <div className="rating-input-balanced">
                            <span>ƒê√°nh gi√° c·ªßa b·∫°n:</span>
                            <div className="stars-input">
                                {[1, 2, 3, 4, 5].map(star => (
                                    <button
                                        key={star}
                                        type="button"
                                        className={star <= newComment.rating ? 'star-btn active' : 'star-btn'}
                                        onClick={() => setNewComment({ ...newComment, rating: star })}
                                    >
                                        ‚òÖ
                                    </button>
                                ))}
                            </div>
                            <span className="rating-value">({newComment.rating}/5)</span>
                        </div>

                        <textarea
                            placeholder="Chia s·∫ª c·∫£m nh·∫≠n c·ªßa b·∫°n v·ªÅ b√†i vi·∫øt n√†y..."
                            value={newComment.content}
                            onChange={(e) => setNewComment({ ...newComment, content: e.target.value })}
                            rows="4"
                            required
                        />

                        <button type="submit" className="btn-balanced primary">
                            üìù G·ª≠i b√¨nh lu·∫≠n
                        </button>
                    </form>
                </div>

                {/* Comments List v·ªõi avatars */}
                <div className="comments-list-balanced">
                    {comments.length === 0 ? (
                        <div className="no-comments-balanced">
                            <div className="empty-illustration">üí¨</div>
                            <h3>Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o</h3>
                            <p>H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n chia s·∫ª c·∫£m nh·∫≠n v·ªÅ b√†i vi·∫øt n√†y!</p>
                        </div>
                    ) : (
                        comments.map(comment => (
                            <div key={comment.id} className="comment-balanced">
                                <div className="comment-avatar-balanced">
                                    {comment.avatar}
                                </div>
                                <div className="comment-body-balanced">
                                    <div className="comment-header-balanced">
                                        <div className="author-info">
                                            <strong className="author-name">{comment.name}</strong>
                                            <div className="comment-rating-balanced">
                                                {[1, 2, 3, 4, 5].map(star => (
                                                    <span key={star} className={star <= comment.rating ? 'star active' : 'star'}>
                                                        ‚òÖ
                                                    </span>
                                                ))}
                                            </div>
                                        </div>
                                        <span className="comment-date-balanced">
                                            {new Date(comment.date).toLocaleDateString('vi-VN')}
                                        </span>
                                    </div>
                                    <p className="comment-content-balanced">{comment.content}</p>
                                </div>
                            </div>
                        ))
                    )}
                </div>
            </section>

            {/* Related Articles v·ªõi hover effects */}
            {relatedArticles.length > 0 && (
                <section className="related-balanced">
                    <h2>üìñ B√†i vi·∫øt li√™n quan</h2>
                    <div className="related-grid-balanced">
                        {relatedArticles.map(relatedArticle => (
                            <Link
                                to={`/article/${relatedArticle.id}`}
                                key={relatedArticle.id}
                                className="related-card-balanced"
                            >
                                <div className="related-image-balanced">
                                    <img src={relatedArticle.image} alt={relatedArticle.title} />
                                    <div className="related-overlay"></div>
                                </div>
                                <div className="related-content-balanced">
                                    <h3>{relatedArticle.title}</h3>
                                    <p className="related-location">üìç {relatedArticle.location}</p>
                                    <div className="related-meta-balanced">
                                        <span>üëÅÔ∏è {relatedArticle.views.toLocaleString('vi-VN')}</span>
                                        <span>üìÖ {new Date(relatedArticle.date).toLocaleDateString('vi-VN')}</span>
                                    </div>
                                </div>
                            </Link>
                        ))}
                    </div>
                </section>
            )}

            {/* Navigation */}
            <div className="article-nav-balanced">
                <Link to="/" className="btn-balanced outline">‚Üê V·ªÅ trang ch·ªß</Link>
            </div>
        </div>
    );
};

export default ArticleDetail; 